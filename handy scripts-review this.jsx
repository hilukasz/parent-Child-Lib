//handy ES scripts/temp/testfile1.pdf.// Embeds a new group item in to the current // document from a file specified by dest// dest should contain the full path and file namefunction embedPDF(dest) {    var embedDoc = new File(dest);    if ( app.documents.length > 0 && embedDoc.exists ) {        var doc = app.activeDocument;        var placed = doc.groupItems.createFromFile( embedDoc ); //interesting part    }}//====================================================================================// Creates a new document, adds text then inserts a // space between each character using insertion points//====================================================================================var docRef = documents.add();var textRef = docRef.textFrames.add();textRef.contents = "Wouldn't you rather be scripting?";textRef.top = 400;textRef.left = 100;textRef.textRange.characterAttributes.size = 20;redraw();// Add a space between each character using insertion points.var ip;for(var i=0; i<(textRef.insertionPoints.length); i+=2) {  ip = textRef.insertionPoints[i];  ip.characters.add(" ");}// get layer namefunction getLayerName(i) {     var layer = document.layers[i];    layer.visible = true;    var layerName = layer.name;    //replace weird charecters in layer names    var layerName = layerName.replace(/\-+/g,'-');  // Collapse multiple dashes into a single one     var layerName = layerName.replace(/\W+/g,'-');  // Replace Non-word characters}alert(layerName);//====================================================================================// Deletes all layers whose name begins with "Temp" in all open documents// loop through all open documents//====================================================================================var layersDeleted = 0;    for ( i = 0; i < app.documents.length; i++ ) {        var targetDocument = app.documents[i];        var layerCount = targetDocument.layers.length;        // Loop through layers from the back, to preserve index        // of remaining layers when we remove one        for (var ii = layerCount - 1; ii >= 0; ii-- ) {            targetLayer = targetDocument.layers[ii];            var layerName = new String( targetLayer.name );            if ( layerName.indexOf("Temp") == 0 ) {                targetDocument.layers[ii].remove();                layersDeleted++;        }    }}//====================================================================================// find what kind of variable something is //====================================================================================alert("name: "+typeof customName+" "+"myLayer: "+typeof myLayer);//====================================================================================// progress bar//====================================================================================var value = 0;var win = new Window("palette{text:'Please wait...',bounds:[100,100,550,140]," +               "progress:Progressbar{bounds:[20,10,430,28] , minvalue:0,value:" + value + "}" +               "};" );win.progress.maxvalue = layers.length;for(var i = 0; i < layers.length; i++){   win.center();   win.show();   //var doc = app.open(files.pop());   //doc.close(SaveOptions.DONOTSAVECHANGES);   win.progress.value++;   win.layout.layout(true);//update the window   $.sleep(1000);}//====================================================================================// prompt//====================================================================================// foldervar folder = Folder.selectDialog();var cool = prompt("description text", "default text");// filevar thePath = File.openDialog();//====================================================================================// forEach//====================================================================================    function forEach(collection, fn)    {        var n = collection.length;        for(var i=0; i<n; ++i)        {            fn(collection[i]);        }    }//====================================================================================// read csv//====================================================================================   function readPref (thePath) {      if (File(thePath).exists == true) {        var file = File(thePath);        file.open("r");        file.encoding= 'BINARY';        var theText = file.read();        file.close();        return String(theText).split(",")        }      };//====================================================================================// write csv//====================================================================================var inputFolder = Folder.selectDialog();var csv = new File(inputFolder+"/notes.txt");      // open text again      csv.open("w");      // append to the file instead of writing      //csv.open("a");              // write your new data to it      for ( var n = 0; n < notes.length; n++) {          csv.writeln(notes[n]);      }      // close the file      csv.close();       //====================================================================================// duplicate a selection//====================================================================================     app.selection.duplicate(); //====================================================================================// get properties of an object//====================================================================================   function printType(obj) {    var key;    for(key in obj) {            $.write("key "+ key + " : " + obj[key] +'\n');     }}//====================================================================================// loop through all symbols or a type in a doc//====================================================================================  for(j = app.activeDocument.pageItems.length-1; j >= 0; j--){     if(app.activeDocument.pageItems[j].typename == "SymbolItem") app.activeDocument.pageItems[j].symbol.remove();}//====================================================================================// change fill of selected object//====================================================================================  doc = app.activeDocument;i = 0var selection = doc.selection[i];var storedColor = doc.selection[i].fillColor;//new object with only fill, we send it to back so it doesn't overlap stroke, if there is onevar newObject = app.selection[i].duplicate(doc, ElementPlacement.PLACEATEND);//turn off fill for first objectdoc.selection[i].filled = false;i = i + 1;newObject.stroked = false;//apply stored color from earlier to new shapenewObject.fillColor = storedColor;newObject.opacity = 50;newObject.name = "50p fill";//====================================================================================// find and replace in layer name//====================================================================================  var doc = app.activeDocumentfor ( i=0; i < doc.layers.length; i++) {   doc.activeLayer = doc.layers[i];    var layerName = doc.activeLayer.name;    var layerName = layerName.replace('.01_','-');     //alert(layerName);    doc.activeLayer.name = layerName;    }//====================================================================================// find layers by name//====================================================================================  // Deletes all layers whose name begins with "Temp" in all open documents// loop through all open documentsvar layersDeleted = 0;var targetDocument = app.documents[i];var layerCount = targetDocument.layers.length;// Loop through layers from the back, to preserve index// of remaining layers when we remove onefor (var i = layerCount - 1; i >= 0; i-- ) {    targetLayer = targetDocument.layers[i];    var layerName = new String( targetLayer.name );    if ( layerName.indexOf("Asset:") == 0 ) {        alert(layerName);        //targetDocument.layers[ii].remove();        layersDeleted++;    }}//====================================================================================// symbol contact sheet//====================================================================================  var newDoc = app.documents.add();var symbolRef = app.activeDocument;var y = 750;var x = 25;app.activeDocument = docRef;var iCount = docRef.symbols.length;for(var i=0; i<iCount; i++) {    app.activeDocument = docRef;    symbolRef = symbolRef.symbols[i];    app.activeDocument = docRef;    symbolItemRef1 = newDoc.symbolItems.add(symbolRef);    symbolItemRef1.top = y;    symbolItemRef1.left = x;    y-=(symbolItemRef1.height + 20);    if( (y) <= 60 ) {        y = 750;        x+= 190;    }}//====================================================================================// JS Objects// function MakeJSObjects(){ }; //====================================================================================  var timObject = {	property1 : "Hello",	property2 : "MmmMMm",	property3 : ["mmm", 2, 3, 6, "kkk"],	method1 : function(){alert("Method had been called" + this.property1)}};timObject.method1();alert(timObject.property3[2]) // will yield 3//====================================================================================// make object size of artboard:  http://forums.adobe.com/message/4161880#4161880// function MakeObjectArtBoardSize(){ }; //====================================================================================#target Illustrator //  script.name = fitObjectToArtboardBounds.jsx;//  script.description = resizes selected object to fit exactly to Active Artboard Bounds;//  script.required = select ONE object before running; CS4 & CS5 Only.//  script.parent = carlos canto // 01/25/12;//  script.elegant = false;  var idoc = app.activeDocument;selec = idoc.selection;if (selec.length==1)          {                    // get document bounds                    var docw = idoc.width;                    var doch = idoc.height;                    var activeAB = idoc.artboards[idoc.artboards.getActiveArtboardIndex()]; // get active AB                      docLeft = activeAB.artboardRect[0];                    docTop = activeAB.artboardRect[1];                       // get selection bounds                    var sel = idoc.selection[0];                    var selVB = sel.visibleBounds;                    var selVw = selVB[2]-selVB[0];                    var selVh = selVB[1]-selVB[3];                      var selGB = sel.geometricBounds;                    var selGw = selGB[2]-selGB[0];                    var selGh = selGB[1]-selGB[3];                      // get the difference between Visible & Geometric Bounds                    var deltaX = selVw-selGw;                    var deltaY = selVh-selGh;                      sel.width = docw-deltaX; // width is Geometric width, so we need to make it smaller...to accomodate the visible portion.                    sel.height = doch-deltaY;                    sel.top = docTop; // Top is actually Visible top                    sel.left = docLeft; // dito for Left            }else          {                    alert("select ONE object before running");          }       //====================================================================================// place text function // placeText(){ }; //====================================================================================               var cTextRef = CurrentDoc.textFrames.add();   cTextRef.textRange.characterAttributes.textFont=app.textFonts.getByName("Verdana");    cTextRef.textRange.characterAttributes.size = 27;   cTextRef.contents = "ArtBoard: "+ (i+1);   cTextRef.left = RulerLeft +55;   cTextRef.top = RulerTop -64;   redraw();    //====================================================================================// crop to visible art with padding// function cropToItemWithPadding(){ }; //====================================================================================               function cropArtboardToBounds() {    var docVB = doc.visibleBounds;    var paddingOn = false;    var top;    var left;    var right;    var bottom;    function padding(pad) {        paddingOn = true;        left = docVB[0] - pad;        top = docVB[1] + pad;        right = docVB[2] + pad;        bottom = docVB[3] - pad;    }    var ab = doc.artboards.getActiveArtboardIndex();    if (paddingOn == false) {        var left = docVB[0];        var top = docVB[1];        var right = docVB[2];        var bottom = docVB[3];    } else {};    // turn this on if you want padding    //padding(20);    doc.artboards[ab].artboardRect = [left,top,right,bottom];} //====================================================================================// select active artboard objects fit to artboard// //====================================================================================  app.activeDocument.artboards.setActiveArtboardIndex(0);app.documents[0].SelectObjectsOnActiveArtboard;newDoc.fitArtboardToSelectedArt(); //====================================================================================// populate symbols in drop down// function PopulateSymbolsInDropdown(){};//====================================================================================   var doc = app.activeDocument;var syms = Array();var count = doc.symbols.length;for ( var i = 0; i < count; i++ )  {          syms.push( doc.symbols[i].name );}; var win = new Window( 'dialog', 'A drop down list of symbols' );win.add( 'dropdownlist', undefined, syms );win.center();win.show();//====================================================================================// OOP stuff//====================================================================================  function B(a) {  console.log(a);}function A(value) {  this.value = value;  this.b = new B(this);}new A("a thing")//====================================================================================// match a string in a layer//====================================================================================//modify ES array objectArray.prototype.indexOf = Array.prototype.indexOf || function(value, start) {  for (var i = 0, length = this.length; i < length; i++) {    if (this[i] == value) {      return i;    }  }  return -1;}var doc = app.activeDocument,    layers = doc.layers,    matchString = 'aPpLe';for(var i = 0; i < layers.length; i++){    var string = layers[i].name.toLowerCase();    if (string.indexOf(matchString.toLowerCase()) != -1){        print(layers[i].name+" contains apples");    }}// pure regexvar doc = app.activeDocument,    layers = doc.layers,    //string to match, change apples to anything else you want    stringToMatch = /apple/i;  //iterate through all the layersfor(var i = 0; i < layers.length; i++){    // if true, continue    if(layers[i].name.match(stringToMatch)){        //return result        print(layers[i].name+" contains apples");    }}